
C:/Users/Seth/Desktop/346lab/lab6/lab6_1c/interrupt_example.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	5c 03 00 00 60 03 00 00 64 03 00 00 68 03 00 00     \...`...d...h...
  30:	6c 03 00 00 5c 08 00 00 0c 03 00 00 70 03 00 00     l...\.......p...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001c7 	bl	7f8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000944 	.word	0x00000944

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d90 	.word	0x00000d90

00000124 <__cs3_heap_start_ptr>:
 124:	00000dc0 	.word	0x00000dc0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d98 	.word	0x00000d98
 170:	00000d9b 	.word	0x00000d9b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d98 	.word	0x00000d98
 1bc:	00000d98 	.word	0x00000d98
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d98 	.word	0x00000d98
 200:	00000000 	.word	0x00000000
 204:	000008e8 	.word	0x000008e8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008e8 	.word	0x000008e8
 250:	00000d9c 	.word	0x00000d9c
 254:	00000948 	.word	0x00000948
 258:	00000000 	.word	0x00000000

0000025c <config_HPS_GPIO1>:
 * and is not used here. The green LED is connected to GPIO1[24]. */
void config_HPS_GPIO1()
{
    volatile int * HPS_GPIO1_ptr = (int *)HPS_GPIO1_BASE; // GPIO1 base address

    *(HPS_GPIO1_ptr + 0x1) =
 25c:	e3093fff 	movw	r3, #40959	; 0x9fff
 260:	e34f3f70 	movt	r3, #65392	; 0xff70
 264:	e3a02401 	mov	r2, #16777216	; 0x1000000
 268:	e5032ffb 	str	r2, [r3, #-4091]	; 0xfffff005
 26c:	e12fff1e 	bx	lr

00000270 <config_interval_timer>:
    volatile int * interval_timer_ptr =
        (int *)TIMER_BASE; // interal timer base address

    /* set the interval timer period for scrolling the HEX displays */
    int counter                 = 5000000; // 1/(100 MHz) x 5x10^6 = 50 msec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
 270:	e3a03a02 	mov	r3, #8192	; 0x2000
 274:	e34f3f20 	movt	r3, #65312	; 0xff20
 278:	e3042b40 	movw	r2, #19264	; 0x4b40
 27c:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
 280:	e3a0204c 	mov	r2, #76	; 0x4c
 284:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
 288:	e3a02007 	mov	r2, #7
 28c:	e5832004 	str	r2, [r3, #4]
 290:	e12fff1e 	bx	lr

00000294 <config_KEYs>:
/* setup the KEY interrupts in the FPGA */
void config_KEYs()
{
    volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address

    *(KEY_ptr + 2) = 0x3; // enable interrupts for KEY[1]
 294:	e3a03000 	mov	r3, #0
 298:	e34f3f20 	movt	r3, #65312	; 0xff20
 29c:	e3a02003 	mov	r2, #3
 2a0:	e5832058 	str	r2, [r3, #88]	; 0x58
 2a4:	e12fff1e 	bx	lr

000002a8 <main>:
 * The interrupt service routine for the interval timer displays a pattern on
 * the LED lights, and shifts this pattern either left or right. The shifting
 * direction is reversed when KEY[1] is pressed
********************************************************************************/
int main(void)
{
 2a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 2ac:	e24dd00c 	sub	sp, sp, #12
    volatile int * HPS_GPIO1_ptr = (int *)HPS_GPIO1_BASE; // GPIO1 base address
    volatile int   HPS_timer_LEDG =
 2b0:	e3a03401 	mov	r3, #16777216	; 0x1000000
 2b4:	e58d3004 	str	r3, [sp, #4]
        0x01000000; // value to turn on the HPS green light LEDG

    set_A9_IRQ_stack();      // initialize the stack pointer for IRQ mode
 2b8:	eb00002d 	bl	374 <set_A9_IRQ_stack>
    config_GIC();            // configure the general interrupt controller
 2bc:	eb000036 	bl	39c <config_GIC>
    // config_HPS_timer();      // configure the HPS timer
    config_HPS_GPIO1();      // configure the HPS GPIO1 interface
 2c0:	ebffffe5 	bl	25c <config_HPS_GPIO1>
    config_interval_timer(); // configure Altera interval timer to generate
 2c4:	ebffffe9 	bl	270 <config_interval_timer>
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts
 2c8:	ebfffff1 	bl	294 <config_KEYs>

    enable_A9_interrupts(); // enable interrupts
 2cc:	eb00002f 	bl	390 <enable_A9_interrupts>

    while (1)
    {
        if (tick)
 2d0:	e3002db4 	movw	r2, #3508	; 0xdb4
 2d4:	e3402000 	movt	r2, #0
        {
            tick           = 0;
 2d8:	e3a00000 	mov	r0, #0
            *HPS_GPIO1_ptr = HPS_timer_LEDG; // turn on/off the green light LEDG
 2dc:	e3091fff 	movw	r1, #40959	; 0x9fff
 2e0:	e34f1f70 	movt	r1, #65392	; 0xff70

    enable_A9_interrupts(); // enable interrupts

    while (1)
    {
        if (tick)
 2e4:	e5923000 	ldr	r3, [r2]
 2e8:	e3530000 	cmp	r3, #0
 2ec:	0afffffc 	beq	2e4 <main+0x3c>
        {
            tick           = 0;
 2f0:	e5820000 	str	r0, [r2]
            *HPS_GPIO1_ptr = HPS_timer_LEDG; // turn on/off the green light LEDG
 2f4:	e59d3004 	ldr	r3, [sp, #4]
 2f8:	e5013fff 	str	r3, [r1, #-4095]	; 0xfffff001
            HPS_timer_LEDG ^= 0x01000000; // toggle the bit that controls LEDG
 2fc:	e59d3004 	ldr	r3, [sp, #4]
 300:	e2233401 	eor	r3, r3, #16777216	; 0x1000000
 304:	e58d3004 	str	r3, [sp, #4]
 308:	eafffff5 	b	2e4 <main+0x3c>

0000030c <__cs3_isr_irq>:
void interval_timer_ISR(void);
void pushbutton_ISR(void);

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
 30c:	e24ee004 	sub	lr, lr, #4
 310:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID  = *((int *)address);
 314:	e3e03a13 	mvn	r3, #77824	; 0x13000
 318:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d

    if (int_ID == HPS_TIMER0_IRQ) // check if interrupt is from the HPS timer
 31c:	e35400c7 	cmp	r4, #199	; 0xc7
 320:	1a000001 	bne	32c <__cs3_isr_irq+0x20>
        HPS_timer_ISR();
 324:	eb00002c 	bl	3dc <HPS_timer_ISR>
 328:	ea000008 	b	350 <__cs3_isr_irq+0x44>
    else if (int_ID ==
 32c:	e3540048 	cmp	r4, #72	; 0x48
 330:	1a000001 	bne	33c <__cs3_isr_irq+0x30>
             INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
        interval_timer_ISR();
 334:	eb000031 	bl	400 <interval_timer_ISR>
 338:	ea000004 	b	350 <__cs3_isr_irq+0x44>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
 33c:	e3540049 	cmp	r4, #73	; 0x49
 340:	1a000001 	bne	34c <__cs3_isr_irq+0x40>
        pushbutton_ISR();
 344:	eb000056 	bl	4a4 <pushbutton_ISR>
 348:	ea000000 	b	350 <__cs3_isr_irq+0x44>
 34c:	eafffffe 	b	34c <__cs3_isr_irq+0x40>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address           = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int *)address) = int_ID;
 350:	e3e03a13 	mvn	r3, #77824	; 0x13000
 354:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 358:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

0000035c <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{
 35c:	eafffffe 	b	35c <__cs3_reset>

00000360 <__cs3_isr_undef>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_undef(void)
{
 360:	eafffffe 	b	360 <__cs3_isr_undef>

00000364 <__cs3_isr_swi>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_swi(void)
{
 364:	eafffffe 	b	364 <__cs3_isr_swi>

00000368 <__cs3_isr_pabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{
 368:	eafffffe 	b	368 <__cs3_isr_pabort>

0000036c <__cs3_isr_dabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{
 36c:	eafffffe 	b	36c <__cs3_isr_dabort>

00000370 <__cs3_isr_fiq>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{
 370:	eafffffe 	b	370 <__cs3_isr_fiq>

00000374 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = A9_ONCHIP_END - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 374:	e3a030d2 	mov	r3, #210	; 0xd2
 378:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
 37c:	e3e03007 	mvn	r3, #7
 380:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 384:	e3a030d3 	mov	r3, #211	; 0xd3
 388:	e129f003 	msr	CPSR_fc, r3
 38c:	e12fff1e 	bx	lr

00000390 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
 390:	e3a03053 	mov	r3, #83	; 0x53
 394:	e129f003 	msr	CPSR_fc, r3
 398:	e12fff1e 	bx	lr

0000039c <config_GIC>:
void config_GIC(void)
{
    int address; // used to calculate register addresses

    /* configure the HPS timer interrupt */
    *((int *)0xFFFED8C4) = 0x01000000;
 39c:	e3e03a12 	mvn	r3, #73728	; 0x12000
 3a0:	e3a02401 	mov	r2, #16777216	; 0x1000000
 3a4:	e503273b 	str	r2, [r3, #-1851]	; 0xfffff8c5
    *((int *)0xFFFED118) = 0x00000080;
 3a8:	e3a02080 	mov	r2, #128	; 0x80
 3ac:	e5032ee7 	str	r2, [r3, #-3815]	; 0xfffff119

    /* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
 3b0:	e2822081 	add	r2, r2, #129	; 0x81
 3b4:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
 3b8:	e3a02c03 	mov	r2, #768	; 0x300
 3bc:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
    // priorities
    address           = MPCORE_GIC_CPUIF + ICCPMR;
    *((int *)address) = 0xFFFF;
 3c0:	e3e01a13 	mvn	r1, #77824	; 0x13000
 3c4:	e30f2fff 	movw	r2, #65535	; 0xffff
 3c8:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of
    // interrupts
    address           = MPCORE_GIC_CPUIF + ICCICR;
    *((int *)address) = ENABLE;
 3cc:	e3a02001 	mov	r2, #1
 3d0:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending
    // interrupts to CPUs
    address           = MPCORE_GIC_DIST + ICDDCR;
    *((int *)address) = ENABLE;
 3d4:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
 3d8:	e12fff1e 	bx	lr

000003dc <HPS_timer_ISR>:
 *****************************************************************************/
void HPS_timer_ISR()
{
    volatile int * HPS_timer_ptr = (int *)HPS_TIMER0_BASE; // HPS timer address

    ++tick; // used by main program
 3dc:	e3003db4 	movw	r3, #3508	; 0xdb4
 3e0:	e3403000 	movt	r3, #0
 3e4:	e5932000 	ldr	r2, [r3]
 3e8:	e2822001 	add	r2, r2, #1
 3ec:	e5832000 	str	r2, [r3]

    *(HPS_timer_ptr + 3); // Read timer end of interrupt register to
 3f0:	e3083fff 	movw	r3, #36863	; 0x8fff
 3f4:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 3f8:	e5133ff3 	ldr	r3, [r3, #-4083]	; 0xfffff00d
 3fc:	e12fff1e 	bx	lr

00000400 <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LED lights. The shift direction
 * is determined by the external variable key_dir.
 *
******************************************************************************/
void interval_timer_ISR()
{
 400:	e24dd008 	sub	sp, sp, #8
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    volatile int * LED_ptr            = (int *)LED_BASE; // LED address
    volatile int pattern = 0xFFFFFFFF;
 404:	e3e03000 	mvn	r3, #0
 408:	e58d3004 	str	r3, [sp, #4]
    volatile int counter = on_period;
 40c:	e3003950 	movw	r3, #2384	; 0x950
 410:	e3403000 	movt	r3, #0
 414:	e5933000 	ldr	r3, [r3]
 418:	e58d3000 	str	r3, [sp]
    *(interval_timer_ptr) = 0;
 41c:	e3a03a02 	mov	r3, #8192	; 0x2000
 420:	e34f3f20 	movt	r3, #65312	; 0xff20
 424:	e3a02000 	mov	r2, #0
 428:	e5832000 	str	r2, [r3]

    int test = *(LED_ptr);
 42c:	e1a03002 	mov	r3, r2
 430:	e34f3f20 	movt	r3, #65312	; 0xff20
 434:	e5933000 	ldr	r3, [r3]
    if (test != 0) {
 438:	e1530002 	cmp	r3, r2
 43c:	0a000007 	beq	460 <interval_timer_ISR+0x60>
        counter = total_period - on_period;
 440:	e3002954 	movw	r2, #2388	; 0x954
 444:	e3402000 	movt	r2, #0
 448:	e5921000 	ldr	r1, [r2]
 44c:	e3002950 	movw	r2, #2384	; 0x950
 450:	e3402000 	movt	r2, #0
 454:	e5922000 	ldr	r2, [r2]
 458:	e0622001 	rsb	r2, r2, r1
 45c:	e58d2000 	str	r2, [sp]
    }

    *(LED_ptr) = pattern ^ test;
 460:	e59d2004 	ldr	r2, [sp, #4]
 464:	e0222003 	eor	r2, r2, r3
 468:	e3a03000 	mov	r3, #0
 46c:	e34f3f20 	movt	r3, #65312	; 0xff20
 470:	e5832000 	str	r2, [r3]
    
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
 474:	e59d2000 	ldr	r2, [sp]
 478:	e6ff2072 	uxth	r2, r2
 47c:	e3a03a02 	mov	r3, #8192	; 0x2000
 480:	e34f3f20 	movt	r3, #65312	; 0xff20
 484:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
 488:	e59d2000 	ldr	r2, [sp]
 48c:	e1a02822 	lsr	r2, r2, #16
 490:	e583200c 	str	r2, [r3, #12]

    *(interval_timer_ptr + 1) = 0x7;
 494:	e3a02007 	mov	r2, #7
 498:	e5832004 	str	r2, [r3, #4]

    return;
}
 49c:	e28dd008 	add	sp, sp, #8
 4a0:	e12fff1e 	bx	lr

000004a4 <pushbutton_ISR>:
void pushbutton_ISR(void)
{
    volatile int * KEY_ptr = (int *)KEY_BASE;
    int            press;

    press          = *(KEY_ptr + 3); // read the pushbutton interrupt register
 4a4:	e3a03000 	mov	r3, #0
 4a8:	e34f3f20 	movt	r3, #65312	; 0xff20
 4ac:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
    *(KEY_ptr + 3) = press;          // Clear the interrupt
 4b0:	e583205c 	str	r2, [r3, #92]	; 0x5c

    key_dir ^= 1; // Toggle key_dir value
 4b4:	e3003db8 	movw	r3, #3512	; 0xdb8
 4b8:	e3403000 	movt	r3, #0
 4bc:	e5932000 	ldr	r2, [r3]
 4c0:	e2222001 	eor	r2, r2, #1
 4c4:	e5832000 	str	r2, [r3]
 4c8:	e12fff1e 	bx	lr

000004cc <atexit>:
 4cc:	e1a01000 	mov	r1, r0
 4d0:	e3a00000 	mov	r0, #0
 4d4:	e92d4008 	push	{r3, lr}
 4d8:	e1a02000 	mov	r2, r0
 4dc:	e1a03000 	mov	r3, r0
 4e0:	eb00000e 	bl	520 <__register_exitproc>
 4e4:	e8bd4008 	pop	{r3, lr}
 4e8:	e12fff1e 	bx	lr

000004ec <exit>:
 4ec:	e92d4008 	push	{r3, lr}
 4f0:	e3a01000 	mov	r1, #0
 4f4:	e1a04000 	mov	r4, r0
 4f8:	eb000045 	bl	614 <__call_exitprocs>
 4fc:	e59f3018 	ldr	r3, [pc, #24]	; 51c <exit+0x30>
 500:	e5930000 	ldr	r0, [r3]
 504:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 508:	e3530000 	cmp	r3, #0
 50c:	11a0e00f 	movne	lr, pc
 510:	112fff13 	bxne	r3
 514:	e1a00004 	mov	r0, r4
 518:	eb0000c9 	bl	844 <_exit>
 51c:	000008ec 	.word	0x000008ec

00000520 <__register_exitproc>:
 520:	e59fc0e4 	ldr	r12, [pc, #228]	; 60c <__register_exitproc+0xec>
 524:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 528:	e59c4000 	ldr	r4, [r12]
 52c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 530:	e35c0000 	cmp	r12, #0
 534:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 538:	e59c5004 	ldr	r5, [r12, #4]
 53c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 540:	e355001f 	cmp	r5, #31
 544:	e24dd010 	sub	sp, sp, #16
 548:	e1a06000 	mov	r6, r0
 54c:	da000015 	ble	5a8 <__register_exitproc+0x88>
 550:	e59f00b8 	ldr	r0, [pc, #184]	; 610 <__register_exitproc+0xf0>
 554:	e3500000 	cmp	r0, #0
 558:	1a000001 	bne	564 <__register_exitproc+0x44>
 55c:	e3e00000 	mvn	r0, #0
 560:	ea000018 	b	5c8 <__register_exitproc+0xa8>
 564:	e3a00e19 	mov	r0, #400	; 0x190
 568:	e58d100c 	str	r1, [sp, #12]
 56c:	e58d2008 	str	r2, [sp, #8]
 570:	e58d3004 	str	r3, [sp, #4]
 574:	e320f000 	nop	{0}
 578:	e250c000 	subs	r12, r0, #0
 57c:	e59d100c 	ldr	r1, [sp, #12]
 580:	e59d2008 	ldr	r2, [sp, #8]
 584:	e59d3004 	ldr	r3, [sp, #4]
 588:	0afffff3 	beq	55c <__register_exitproc+0x3c>
 58c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 590:	e3a00000 	mov	r0, #0
 594:	e58c0004 	str	r0, [r12, #4]
 598:	e58c5000 	str	r5, [r12]
 59c:	e584c148 	str	r12, [r4, #328]	; 0x148
 5a0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 5a4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 5a8:	e3560000 	cmp	r6, #0
 5ac:	e59c4004 	ldr	r4, [r12, #4]
 5b0:	1a000007 	bne	5d4 <__register_exitproc+0xb4>
 5b4:	e2843002 	add	r3, r4, #2
 5b8:	e2844001 	add	r4, r4, #1
 5bc:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5c0:	e58c4004 	str	r4, [r12, #4]
 5c4:	e3a00000 	mov	r0, #0
 5c8:	e28dd010 	add	sp, sp, #16
 5cc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5d0:	e12fff1e 	bx	lr
 5d4:	e3a00001 	mov	r0, #1
 5d8:	e1a00410 	lsl	r0, r0, r4
 5dc:	e08c8104 	add	r8, r12, r4, lsl #2
 5e0:	e3560002 	cmp	r6, #2
 5e4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5e8:	e5883108 	str	r3, [r8, #264]	; 0x108
 5ec:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5f0:	e1877000 	orr	r7, r7, r0
 5f4:	01830000 	orreq	r0, r3, r0
 5f8:	e1a05008 	mov	r5, r8
 5fc:	e5882088 	str	r2, [r8, #136]	; 0x88
 600:	e58c7188 	str	r7, [r12, #392]	; 0x188
 604:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 608:	eaffffe9 	b	5b4 <__register_exitproc+0x94>
 60c:	000008ec 	.word	0x000008ec
 610:	00000000 	.word	0x00000000

00000614 <__call_exitprocs>:
 614:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 618:	e59f3168 	ldr	r3, [pc, #360]	; 788 <__call_exitprocs+0x174>
 61c:	e5933000 	ldr	r3, [r3]
 620:	e24dd014 	sub	sp, sp, #20
 624:	e58d3004 	str	r3, [sp, #4]
 628:	e2833f52 	add	r3, r3, #328	; 0x148
 62c:	e58d0008 	str	r0, [sp, #8]
 630:	e58d300c 	str	r3, [sp, #12]
 634:	e1a07001 	mov	r7, r1
 638:	e3a08001 	mov	r8, #1
 63c:	e59d3004 	ldr	r3, [sp, #4]
 640:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 644:	e3560000 	cmp	r6, #0
 648:	e59db00c 	ldr	r11, [sp, #12]
 64c:	0a000033 	beq	720 <__call_exitprocs+0x10c>
 650:	e5965004 	ldr	r5, [r6, #4]
 654:	e2554001 	subs	r4, r5, #1
 658:	5286a088 	addpl	r10, r6, #136	; 0x88
 65c:	5285501f 	addpl	r5, r5, #31
 660:	508a5105 	addpl	r5, r10, r5, lsl #2
 664:	5a000007 	bpl	688 <__call_exitprocs+0x74>
 668:	ea000029 	b	714 <__call_exitprocs+0x100>
 66c:	e5953000 	ldr	r3, [r5]
 670:	e1530007 	cmp	r3, r7
 674:	0a000005 	beq	690 <__call_exitprocs+0x7c>
 678:	e2444001 	sub	r4, r4, #1
 67c:	e3740001 	cmn	r4, #1
 680:	e2455004 	sub	r5, r5, #4
 684:	0a000022 	beq	714 <__call_exitprocs+0x100>
 688:	e3570000 	cmp	r7, #0
 68c:	1afffff6 	bne	66c <__call_exitprocs+0x58>
 690:	e5963004 	ldr	r3, [r6, #4]
 694:	e06a2005 	rsb	r2, r10, r5
 698:	e2433001 	sub	r3, r3, #1
 69c:	e0862002 	add	r2, r6, r2
 6a0:	e1530004 	cmp	r3, r4
 6a4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 6a8:	13a01000 	movne	r1, #0
 6ac:	05864004 	streq	r4, [r6, #4]
 6b0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6b4:	e3530000 	cmp	r3, #0
 6b8:	0affffee 	beq	678 <__call_exitprocs+0x64>
 6bc:	e1a02418 	lsl	r2, r8, r4
 6c0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6c4:	e1120001 	tst	r2, r1
 6c8:	e5969004 	ldr	r9, [r6, #4]
 6cc:	0a000016 	beq	72c <__call_exitprocs+0x118>
 6d0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6d4:	e1120001 	tst	r2, r1
 6d8:	1a000016 	bne	738 <__call_exitprocs+0x124>
 6dc:	e59d0008 	ldr	r0, [sp, #8]
 6e0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6e4:	e1a0e00f 	mov	lr, pc
 6e8:	e12fff13 	bx	r3
 6ec:	e5963004 	ldr	r3, [r6, #4]
 6f0:	e1530009 	cmp	r3, r9
 6f4:	1affffd0 	bne	63c <__call_exitprocs+0x28>
 6f8:	e59b3000 	ldr	r3, [r11]
 6fc:	e1530006 	cmp	r3, r6
 700:	1affffcd 	bne	63c <__call_exitprocs+0x28>
 704:	e2444001 	sub	r4, r4, #1
 708:	e3740001 	cmn	r4, #1
 70c:	e2455004 	sub	r5, r5, #4
 710:	1affffdc 	bne	688 <__call_exitprocs+0x74>
 714:	e59f1070 	ldr	r1, [pc, #112]	; 78c <__call_exitprocs+0x178>
 718:	e3510000 	cmp	r1, #0
 71c:	1a000009 	bne	748 <__call_exitprocs+0x134>
 720:	e28dd014 	add	sp, sp, #20
 724:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 728:	e12fff1e 	bx	lr
 72c:	e1a0e00f 	mov	lr, pc
 730:	e12fff13 	bx	r3
 734:	eaffffec 	b	6ec <__call_exitprocs+0xd8>
 738:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 73c:	e1a0e00f 	mov	lr, pc
 740:	e12fff13 	bx	r3
 744:	eaffffe8 	b	6ec <__call_exitprocs+0xd8>
 748:	e5963004 	ldr	r3, [r6, #4]
 74c:	e3530000 	cmp	r3, #0
 750:	e5963000 	ldr	r3, [r6]
 754:	1a000008 	bne	77c <__call_exitprocs+0x168>
 758:	e3530000 	cmp	r3, #0
 75c:	0a000006 	beq	77c <__call_exitprocs+0x168>
 760:	e1a00006 	mov	r0, r6
 764:	e58b3000 	str	r3, [r11]
 768:	e320f000 	nop	{0}
 76c:	e59b6000 	ldr	r6, [r11]
 770:	e3560000 	cmp	r6, #0
 774:	1affffb5 	bne	650 <__call_exitprocs+0x3c>
 778:	eaffffe8 	b	720 <__call_exitprocs+0x10c>
 77c:	e1a0b006 	mov	r11, r6
 780:	e1a06003 	mov	r6, r3
 784:	eafffff9 	b	770 <__call_exitprocs+0x15c>
 788:	000008ec 	.word	0x000008ec
 78c:	00000000 	.word	0x00000000

00000790 <register_fini>:
 790:	e92d4008 	push	{r3, lr}
 794:	e59f3010 	ldr	r3, [pc, #16]	; 7ac <register_fini+0x1c>
 798:	e3530000 	cmp	r3, #0
 79c:	159f000c 	ldrne	r0, [pc, #12]	; 7b0 <register_fini+0x20>
 7a0:	1bffff49 	blne	4cc <atexit>
 7a4:	e8bd4008 	pop	{r3, lr}
 7a8:	e12fff1e 	bx	lr
 7ac:	00000914 	.word	0x00000914
 7b0:	000007b4 	.word	0x000007b4

000007b4 <__libc_fini_array>:
 7b4:	e92d4038 	push	{r3, r4, r5, lr}
 7b8:	e59f5030 	ldr	r5, [pc, #48]	; 7f0 <__libc_fini_array+0x3c>
 7bc:	e59f4030 	ldr	r4, [pc, #48]	; 7f4 <__libc_fini_array+0x40>
 7c0:	e0654004 	rsb	r4, r5, r4
 7c4:	e1b04144 	asrs	r4, r4, #2
 7c8:	10855104 	addne	r5, r5, r4, lsl #2
 7cc:	0a000004 	beq	7e4 <__libc_fini_array+0x30>
 7d0:	e5353004 	ldr	r3, [r5, #-4]!
 7d4:	e1a0e00f 	mov	lr, pc
 7d8:	e12fff13 	bx	r3
 7dc:	e2544001 	subs	r4, r4, #1
 7e0:	1afffffa 	bne	7d0 <__libc_fini_array+0x1c>
 7e4:	eb00004a 	bl	914 <__libc_fini>
 7e8:	e8bd4038 	pop	{r3, r4, r5, lr}
 7ec:	e12fff1e 	bx	lr
 7f0:	0000092c 	.word	0x0000092c
 7f4:	00000930 	.word	0x00000930

000007f8 <__cs3_premain>:
 7f8:	e92d4008 	push	{r3, lr}
 7fc:	eb000017 	bl	860 <__libc_init_array>
 800:	e59f3030 	ldr	r3, [pc, #48]	; 838 <__cs3_premain+0x40>
 804:	e3530000 	cmp	r3, #0
 808:	15930000 	ldrne	r0, [r3]
 80c:	01a00003 	moveq	r0, r3
 810:	e59f3024 	ldr	r3, [pc, #36]	; 83c <__cs3_premain+0x44>
 814:	e3530000 	cmp	r3, #0
 818:	15931000 	ldrne	r1, [r3]
 81c:	01a01003 	moveq	r1, r3
 820:	e3a02000 	mov	r2, #0
 824:	ebfffe9f 	bl	2a8 <main>
 828:	e59f3010 	ldr	r3, [pc, #16]	; 840 <__cs3_premain+0x48>
 82c:	e3530000 	cmp	r3, #0
 830:	1bffff2d 	blne	4ec <exit>
 834:	eafffffe 	b	834 <__cs3_premain+0x3c>
	...
 840:	000004ec 	.word	0x000004ec

00000844 <_exit>:
 844:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 848:	e3a00018 	mov	r0, #24
 84c:	e59f1004 	ldr	r1, [pc, #4]	; 858 <_exit+0x14>
 850:	ef123456 	svc	0x00123456
 854:	eafffffe 	b	854 <_exit+0x10>
 858:	00020026 	.word	0x00020026

0000085c <__cs3_isr_interrupt>:
 85c:	eafffffe 	b	85c <__cs3_isr_interrupt>

00000860 <__libc_init_array>:
 860:	e92d4070 	push	{r4, r5, r6, lr}
 864:	e59f506c 	ldr	r5, [pc, #108]	; 8d8 <__libc_init_array+0x78>
 868:	e59f606c 	ldr	r6, [pc, #108]	; 8dc <__libc_init_array+0x7c>
 86c:	e0656006 	rsb	r6, r5, r6
 870:	e1b06146 	asrs	r6, r6, #2
 874:	12455004 	subne	r5, r5, #4
 878:	13a04000 	movne	r4, #0
 87c:	0a000005 	beq	898 <__libc_init_array+0x38>
 880:	e5b53004 	ldr	r3, [r5, #4]!
 884:	e2844001 	add	r4, r4, #1
 888:	e1a0e00f 	mov	lr, pc
 88c:	e12fff13 	bx	r3
 890:	e1560004 	cmp	r6, r4
 894:	1afffff9 	bne	880 <__libc_init_array+0x20>
 898:	e59f5040 	ldr	r5, [pc, #64]	; 8e0 <__libc_init_array+0x80>
 89c:	e59f6040 	ldr	r6, [pc, #64]	; 8e4 <__libc_init_array+0x84>
 8a0:	e0656006 	rsb	r6, r5, r6
 8a4:	eb000012 	bl	8f4 <_init>
 8a8:	e1b06146 	asrs	r6, r6, #2
 8ac:	12455004 	subne	r5, r5, #4
 8b0:	13a04000 	movne	r4, #0
 8b4:	0a000005 	beq	8d0 <__libc_init_array+0x70>
 8b8:	e5b53004 	ldr	r3, [r5, #4]!
 8bc:	e2844001 	add	r4, r4, #1
 8c0:	e1a0e00f 	mov	lr, pc
 8c4:	e12fff13 	bx	r3
 8c8:	e1560004 	cmp	r6, r4
 8cc:	1afffff9 	bne	8b8 <__libc_init_array+0x58>
 8d0:	e8bd4070 	pop	{r4, r5, r6, lr}
 8d4:	e12fff1e 	bx	lr
 8d8:	0000090c 	.word	0x0000090c
 8dc:	0000090c 	.word	0x0000090c
 8e0:	0000090c 	.word	0x0000090c
 8e4:	00000914 	.word	0x00000914

Disassembly of section .rodata:

000008ec <_global_impure_ptr>:
 8ec:	00000968 00000043                       h...C...

000008f4 <_init>:
 8f4:	e1a0c00d 	mov	r12, sp
 8f8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8fc:	e24cb004 	sub	r11, r12, #4
 900:	e24bd028 	sub	sp, r11, #40	; 0x28
 904:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 908:	e12fff1e 	bx	lr

0000090c <__init_array_start>:
 90c:	00000790 	.word	0x00000790

00000910 <__frame_dummy_init_array_entry>:
 910:	00000208                                ....

00000914 <__libc_fini>:
 914:	e1a0c00d 	mov	r12, sp
 918:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 91c:	e24cb004 	sub	r11, r12, #4
 920:	e24bd028 	sub	sp, r11, #40	; 0x28
 924:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 928:	e12fff1e 	bx	lr

0000092c <__fini_array_start>:
 92c:	000001c4 	.word	0x000001c4

00000930 <__cs3_regions>:
 930:	00000000 	.word	0x00000000
 934:	00000040 	.word	0x00000040
 938:	00000040 	.word	0x00000040
 93c:	00000d58 	.word	0x00000d58
 940:	00000028 	.word	0x00000028

00000944 <__cs3_regions_end>:
 944:	00000000 	.word	0x00000000
