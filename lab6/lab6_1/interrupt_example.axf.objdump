
C:/Users/Seth/Desktop/346lab/lab6/lab6_1/interrupt_example.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea00004a 	b	134 <SERVICE_UND>
   8:	ea00004a 	b	138 <SERVICE_SVC>
   c:	ea00004b 	b	140 <SERVICE_ABT_INST>
  10:	ea000049 	b	13c <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000034 	b	f0 <SERVICE_IRQ>
  1c:	ea000048 	b	144 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
 ********************************************************************************/
.text                                   
.global     _start                      
_start:                                     
/* Set up stack pointers for IRQ and SVC processor modes */
        MOV     R1, #INT_DISABLE | IRQ_MODE 
  40:	e3a010d2 	mov	r1, #210	; 0xd2
        MSR     CPSR_c, R1                  // change to IRQ mode
  44:	e121f001 	msr	CPSR_c, r1
        LDR     SP, =A9_ONCHIP_END - 3      // set IRQ stack to top of A9 onchip
  48:	e3e0d003 	mvn	sp, #3
                                            // memory

/* Change to SVC (supervisor) mode with interrupts disabled */
        MOV     R1, #INT_DISABLE | SVC_MODE 
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
        MSR     CPSR_c, R1                  // change to supervisor mode
  50:	e121f001 	msr	CPSR_c, r1
        LDR     SP, =DDR_END - 3            // set SVC stack to top of DDR3 memory
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

        BL      CONFIG_GIC                  // configure the ARM generic interrupt
  58:	eb00003a 	bl	148 <CONFIG_GIC>
                                            // controller
       // BL      CONFIG_HPS_TIMER            // configure the HPS timer
        BL      CONFIG_INTERVAL_TIMER       // configure the Altera interval timer
  5c:	eb00000e 	bl	9c <CONFIG_INTERVAL_TIMER>
        BL      CONFIG_KEYS                 // configure the pushbutton KEYs
  60:	eb000015 	bl	bc <CONFIG_KEYS>

/* initialize the GPIO1 port */
        LDR     R0, =HPS_GPIO1_BASE         // GPIO1 base address
  64:	e59f0070 	ldr	r0, [pc, #112]	; dc <KEY_DIR+0x4>
        MOV     R4, #0x01000000             // value to turn on the HPS green light
  68:	e3a04401 	mov	r4, #16777216	; 0x1000000
                                            // LEDG
        STR     R4, [R0, #0x4]              // write to the data direction register
  6c:	e5804004 	str	r4, [r0, #4]
                                            // to set
                                            // bit 24 (LEDG) to be an output
/* enable IRQ interrupts in the processor */
        MOV     R1, #INT_ENABLE | SVC_MODE  // IRQ unmasked, MODE = SVC
  70:	e3a01053 	mov	r1, #83	; 0x53
        MSR     CPSR_c, R1                  
  74:	e121f001 	msr	CPSR_c, r1
        LDR     R3, =TICK                   // global variable
  78:	e59f3060 	ldr	r3, [pc, #96]	; e0 <KEY_DIR+0x8>

0000007c <LOOP>:
LOOP:                                       
        LDR     R5, [R3]                    // read tick variable
  7c:	e5935000 	ldr	r5, [r3]
        CMP     R5, #0                      // HPS timer expired?
  80:	e3550000 	cmp	r5, #0
        BEQ     LOOP                        
  84:	0afffffc 	beq	7c <LOOP>
        MOV     R5, #0                      
  88:	e3a05000 	mov	r5, #0
        STR     R5, [R3]                    // reset tick variable
  8c:	e5835000 	str	r5, [r3]
        STR     R4, [R0]                    // turn on/off LEDG
  90:	e5804000 	str	r4, [r0]
        EOR     R4, R4, #0x01000000         // toggle bit that controls LEDG
  94:	e2244401 	eor	r4, r4, #16777216	; 0x1000000
        B       LOOP                        
  98:	eafffff7 	b	7c <LOOP>

0000009c <CONFIG_INTERVAL_TIMER>:
@         STR     R1, [R0, #0x8]              // write to timer control register
@         BX      LR                          

/* Configure the Altera interval timer to create interrupts at 50-msec intervals */
CONFIG_INTERVAL_TIMER:                      
        LDR     R0, =TIMER_BASE             
  9c:	e59f0040 	ldr	r0, [pc, #64]	; e4 <KEY_DIR+0xc>
/* set the interval timer period for scrolling the LED displays */
        LDR     R1, =5000000                // 1/(100 MHz) x 5x10^6 = 50 msec
  a0:	e59f1040 	ldr	r1, [pc, #64]	; e8 <KEY_DIR+0x10>
        STR     R1, [R0, #0x8]              // store the low half word of counter
  a4:	e5801008 	str	r1, [r0, #8]
                                            // start value
        LSR     R1, R1, #16                 
  a8:	e1a01821 	lsr	r1, r1, #16
        STR     R1, [R0, #0xC]              // high half word of counter start value
  ac:	e580100c 	str	r1, [r0, #12]

                                            // start the interval timer, enable its interrupts
        MOV     R1, #0x7                    // START = 1, CONT = 1, ITO = 1
  b0:	e3a01007 	mov	r1, #7
        STR     R1, [R0, #0x4]              
  b4:	e5801004 	str	r1, [r0, #4]
        BX      LR                          
  b8:	e12fff1e 	bx	lr

000000bc <CONFIG_KEYS>:

/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:                                
                                            // write to the pushbutton port interrupt mask register
        LDR     R0, =KEY_BASE               // pushbutton key base address
  bc:	e59f0028 	ldr	r0, [pc, #40]	; ec <KEY_DIR+0x14>
        MOV     R1, #0x3                    // set interrupt mask bits
  c0:	e3a01003 	mov	r1, #3
        STR     R1, [R0, #0x8]              // interrupt mask register is (base + 8)
  c4:	e5801008 	str	r1, [r0, #8]
        BX      LR                          
  c8:	e12fff1e 	bx	lr

000000cc <TICK>:
  cc:	00000000 	.word	0x00000000

000000d0 <Total_Period>:
  d0:	0bebc200 	.word	0x0bebc200

000000d4 <On_Period>:
  d4:	05f5e100 	.word	0x05f5e100

000000d8 <KEY_DIR>:
  d8:	00000000 	.word	0x00000000
  dc:	ff709000 	.word	0xff709000
  e0:	000000cc 	.word	0x000000cc
  e4:	ff202000 	.word	0xff202000
  e8:	004c4b40 	.word	0x004c4b40
  ec:	ff200050 	.word	0xff200050

000000f0 <SERVICE_IRQ>:
 */

/*--- IRQ ---------------------------------------------------------------------*/
.global     SERVICE_IRQ             
SERVICE_IRQ:                            
        PUSH    {R0-R7, LR}             
  f0:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

/* Read the ICCIAR from the CPU interface */
        LDR     R4, =MPCORE_GIC_CPUIF   
  f4:	e59f409c 	ldr	r4, [pc, #156]	; 198 <ICDICER+0x18>
        LDR     R5, [R4, #ICCIAR]       // read the interrupt ID
  f8:	e594500c 	ldr	r5, [r4, #12]

000000fc <HPS_TIMER_CHECK>:

HPS_TIMER_CHECK:                        
        CMP     R5, #HPS_TIMER0_IRQ     // check for HPS timer interrupt
  fc:	e35500c7 	cmp	r5, #199	; 0xc7
        BNE     INTERVAL_TIMER_CHECK    
 100:	1a000001 	bne	10c <INTERVAL_TIMER_CHECK>

        BL      HPS_TIMER_ISR           
 104:	eb00002b 	bl	1b8 <HPS_TIMER_ISR>
        B       EXIT_IRQ                
 108:	ea000006 	b	128 <EXIT_IRQ>

0000010c <INTERVAL_TIMER_CHECK>:

INTERVAL_TIMER_CHECK:                   
        CMP     R5, #INTERVAL_TIMER_IRQ // check for FPGA timer interrupt
 10c:	e3550048 	cmp	r5, #72	; 0x48
        BNE     KEYS_CHECK              
 110:	1a000001 	bne	11c <KEYS_CHECK>

        BL      TIMER_ISR               
 114:	eb00003a 	bl	204 <TIMER_ISR>
        B       EXIT_IRQ                
 118:	ea000002 	b	128 <EXIT_IRQ>

0000011c <KEYS_CHECK>:

KEYS_CHECK:                             
        CMP     R5, #KEYS_IRQ           
 11c:	e3550049 	cmp	r5, #73	; 0x49

00000120 <UNEXPECTED>:
UNEXPECTED:                             
        BNE     UNEXPECTED              // if not recognized, stop here
 120:	1afffffe 	bne	120 <UNEXPECTED>

        BL      KEY_ISR                 
 124:	eb00002c 	bl	1dc <KEY_ISR>

00000128 <EXIT_IRQ>:
EXIT_IRQ:                               
/* Write to the End of Interrupt Register (ICCEOIR) */
        STR     R5, [R4, #ICCEOIR]      
 128:	e5845010 	str	r5, [r4, #16]

        POP     {R0-R7, LR}             
 12c:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
        SUBS    PC, LR, #4              
 130:	e25ef004 	subs	pc, lr, #4

00000134 <SERVICE_UND>:


/*--- Undefined instructions --------------------------------------------------*/
.global     SERVICE_UND             
SERVICE_UND:                            
        B       SERVICE_UND             
 134:	eafffffe 	b	134 <SERVICE_UND>

00000138 <SERVICE_SVC>:

/*--- Software interrupts -----------------------------------------------------*/
.global     SERVICE_SVC             
SERVICE_SVC:                            
        B       SERVICE_SVC             
 138:	eafffffe 	b	138 <SERVICE_SVC>

0000013c <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
.global     SERVICE_ABT_DATA        
SERVICE_ABT_DATA:                       
        B       SERVICE_ABT_DATA        
 13c:	eafffffe 	b	13c <SERVICE_ABT_DATA>

00000140 <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
.global     SERVICE_ABT_INST        
SERVICE_ABT_INST:                       
        B       SERVICE_ABT_INST        
 140:	eafffffe 	b	140 <SERVICE_ABT_INST>

00000144 <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
.global     SERVICE_FIQ             
SERVICE_FIQ:                            
        B       SERVICE_FIQ             
 144:	eafffffe 	b	144 <SERVICE_FIQ>

00000148 <CONFIG_GIC>:
 * Configure the Generic Interrupt Controller (GIC)
 */
.global     CONFIG_GIC              
CONFIG_GIC:                             
/* configure the HPS timer interrupt */
        LDR     R0, =0xFFFED8C4         // ICDIPTRn: processor targets register
 148:	e59f004c 	ldr	r0, [pc, #76]	; 19c <ICDICER+0x1c>
        LDR     R1, =0x01000000         // set target to cpu0
 14c:	e3a01401 	mov	r1, #16777216	; 0x1000000
        STR     R1, [R0]                
 150:	e5801000 	str	r1, [r0]

        LDR     R0, =0xFFFED118         // ICDISERn: set enable register
 154:	e59f0044 	ldr	r0, [pc, #68]	; 1a0 <ICDICER+0x20>
        LDR     R1, =0x00000080         // set interrupt enable
 158:	e3a01080 	mov	r1, #128	; 0x80
        STR     R1, [R0]                
 15c:	e5801000 	str	r1, [r0]

/* configure the FPGA IRQ0 (interval timer) and IRQ1 (KEYs) interrupts */
        LDR     R0, =0xFFFED848         // ICDIPTRn: processor targets register
 160:	e59f003c 	ldr	r0, [pc, #60]	; 1a4 <ICDICER+0x24>
        LDR     R1, =0x00000101         // set targets to cpu0
 164:	e59f103c 	ldr	r1, [pc, #60]	; 1a8 <ICDICER+0x28>
        STR     R1, [R0]                
 168:	e5801000 	str	r1, [r0]

        LDR     R0, =0xFFFED108         // ICDISERn: set enable register
 16c:	e59f0038 	ldr	r0, [pc, #56]	; 1ac <ICDICER+0x2c>
        LDR     R1, =0x00000300         // set interrupt enable
 170:	e3a01c03 	mov	r1, #768	; 0x300
        STR     R1, [R0]                
 174:	e5801000 	str	r1, [r0]

/* configure the GIC CPU interface */
        LDR     R0, =MPCORE_GIC_CPUIF   // base address of CPU interface
 178:	e59f0018 	ldr	r0, [pc, #24]	; 198 <ICDICER+0x18>
/* Set Interrupt Priority Mask Register (ICCPMR) */
        LDR     R1, =0xFFFF             // 0xFFFF enables interrupts of all
 17c:	e59f102c 	ldr	r1, [pc, #44]	; 1b0 <ICDICER+0x30>
                                        // priorities levels
        STR     R1, [R0, #ICCPMR]       
 180:	e5801004 	str	r1, [r0, #4]
/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
 * allows interrupts to be forwarded to the CPU(s) */
        MOV     R1, #ENABLE             
 184:	e3a01001 	mov	r1, #1
        STR     R1, [R0, #ICCICR]       
 188:	e5801000 	str	r1, [r0]

/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
 * allows the distributor to forward interrupts to the CPU interface(s) */
        LDR     R0, =MPCORE_GIC_DIST    
 18c:	e59f0020 	ldr	r0, [pc, #32]	; 1b4 <ICDICER+0x34>
        STR     R1, [R0, #ICDDCR]       
 190:	e5801000 	str	r1, [r0]
        BX      LR                      
 194:	e12fff1e 	bx	lr
 198:	fffec100 	.word	0xfffec100
 19c:	fffed8c4 	.word	0xfffed8c4
 1a0:	fffed118 	.word	0xfffed118
 1a4:	fffed848 	.word	0xfffed848
 1a8:	00000101 	.word	0x00000101
 1ac:	fffed108 	.word	0xfffed108
 1b0:	0000ffff 	.word	0x0000ffff
 1b4:	fffed000 	.word	0xfffed000

000001b8 <HPS_TIMER_ISR>:
 *****************************************************************************/

.global     HPS_TIMER_ISR           
HPS_TIMER_ISR:

        LDR     R0, =HPS_TIMER0_BASE    // base address of timer
 1b8:	e59f0014 	ldr	r0, [pc, #20]	; 1d4 <HPS_TIMER_ISR+0x1c>
        LDR     R1, =TICK               // used by main program
 1bc:	e59f1014 	ldr	r1, [pc, #20]	; 1d8 <HPS_TIMER_ISR+0x20>

        LDR     R2, [R1]                
 1c0:	e5912000 	ldr	r2, [r1]
        ADD     R2, R2, #1              
 1c4:	e2822001 	add	r2, r2, #1
        STR     R2, [R1]                // ++tick
 1c8:	e5812000 	str	r2, [r1]

        LDR     R0, [R0, #0xC]          // read timer end of interrupt register to
 1cc:	e590000c 	ldr	r0, [r0, #12]
                                        // clear the interrupt
        BX      LR                      
 1d0:	e12fff1e 	bx	lr
 1d4:	ffc08000 	.word	0xffc08000
 1d8:	000000cc 	.word	0x000000cc

000001dc <KEY_ISR>:
 *
 * This routine toggles the KEY_DIR variable from 0 <-> 1
 ****************************************************************************************/
.global     KEY_ISR         
KEY_ISR:
        LDR     R0, =KEY_BASE   // base address of pushbutton KEY parallel port
 1dc:	e59f0018 	ldr	r0, [pc, #24]	; 1fc <END_KEY_ISR+0x4>
/* KEY[1] is the only key configured for interrupts, so just clear it. */
        LDR     R1, [R0, #0xC]  // read edge capture register
 1e0:	e590100c 	ldr	r1, [r0, #12]
        STR     R1, [R0, #0xC]  // clear the interrupt
 1e4:	e580100c 	str	r1, [r0, #12]

        LDR     R1, =KEY_DIR    // set up a pointer to the shift direction variable
 1e8:	e59f1010 	ldr	r1, [pc, #16]	; 200 <END_KEY_ISR+0x8>
        LDR     R2, [R1]        // load value of shift direction variable
 1ec:	e5912000 	ldr	r2, [r1]
        EOR     R2, R2, #1      // toggle the shift direction
 1f0:	e2222001 	eor	r2, r2, #1
        STR     R2, [R1]        
 1f4:	e5812000 	str	r2, [r1]

000001f8 <END_KEY_ISR>:

END_KEY_ISR:
        BX      LR              
 1f8:	e12fff1e 	bx	lr
 1fc:	ff200050 	.word	0xff200050
 200:	000000d8 	.word	0x000000d8

00000204 <TIMER_ISR>:
 * is determined by the external variable KEY_PRESSED.
 *
 ******************************************************************************/
.global     TIMER_ISR 
TIMER_ISR:                      
        PUSH    {R4-R7}         
 204:	e92d00f0 	push	{r4, r5, r6, r7}
        LDR     R1, =TIMER_BASE // interval timer base address
 208:	e59f1058 	ldr	r1, [pc, #88]	; 268 <END_TIMER_ISR+0x8>
        MOVS    R0, #0          
 20c:	e3b00000 	movs	r0, #0
        STR     R0, [R1]        // clear the interrupt
 210:	e5810000 	str	r0, [r1]

        LDR     R2, =LED_BASE   // LED base address
 214:	e59f2050 	ldr	r2, [pc, #80]	; 26c <END_TIMER_ISR+0xc>
        LDR     R3, =0xFFFFFFFF
 218:	e3e03000 	mvn	r3, #0
        LDR     R4, =Total_Period
 21c:	e59f404c 	ldr	r4, [pc, #76]	; 270 <END_TIMER_ISR+0x10>
        LDR     R4, [R4]
 220:	e5944000 	ldr	r4, [r4]
        LDR     R5, =On_Period
 224:	e59f5048 	ldr	r5, [pc, #72]	; 274 <END_TIMER_ISR+0x14>
        LDR     R5, [R5]
 228:	e5955000 	ldr	r5, [r5]

        LDR     R6, [R2]
 22c:	e5926000 	ldr	r6, [r2]
        CMP     R6, #0
 230:	e3560000 	cmp	r6, #0
        BEQ     Display
 234:	0a000000 	beq	23c <Display>

00000238 <Off_Period>:


Off_Period:
        SUB     R5, R4, R5
 238:	e0445005 	sub	r5, r4, r5

0000023c <Display>:
Display:
        EOR     R6, R3, R6
 23c:	e0236006 	eor	r6, r3, r6
        STR     R6, [R2]
 240:	e5826000 	str	r6, [r2]

00000244 <Set_Timer>:
Set_Timer: 
        MOV     R0, #0x0
 244:	e3a00000 	mov	r0, #0
        STR     R0, [R1, #0x4]
 248:	e5810004 	str	r0, [r1, #4]

        STR     R5, [R1, #0x8]
 24c:	e5815008 	str	r5, [r1, #8]
        LSR     R5, R5, #16
 250:	e1a05825 	lsr	r5, r5, #16
        STR     R5, [R1, #0xC]
 254:	e581500c 	str	r5, [r1, #12]
        MOV     R0, #0x7
 258:	e3a00007 	mov	r0, #7
        STR     R0, [R1, #0x4]
 25c:	e5810004 	str	r0, [r1, #4]

00000260 <END_TIMER_ISR>:

END_TIMER_ISR:                  
        POP     {R4-R7}         
 260:	e8bd00f0 	pop	{r4, r5, r6, r7}
        BX      LR              
 264:	e12fff1e 	bx	lr
 268:	ff202000 	.word	0xff202000
 26c:	ff200000 	.word	0xff200000
 270:	000000d0 	.word	0x000000d0
 274:	000000d4 	.word	0x000000d4
