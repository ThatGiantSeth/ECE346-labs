
C:/Users/Seth/Desktop/346lab/lab5/in-class/lab5_2c/JTAG.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 0c 07 00 00 10 07 00 00 14 07 00 00     @...............
  30:	18 07 00 00 08 07 00 00 1c 07 00 00 20 07 00 00     ............ ...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000172 	bl	6a4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000820 	.word	0x00000820

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000c58 	.word	0x00000c58

00000124 <__cs3_heap_start_ptr>:
 124:	00000c80 	.word	0x00000c80

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000c60 	.word	0x00000c60
 170:	00000c63 	.word	0x00000c63
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000c60 	.word	0x00000c60
 1bc:	00000c60 	.word	0x00000c60
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000c60 	.word	0x00000c60
 200:	00000000 	.word	0x00000000
 204:	000007ac 	.word	0x000007ac

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000007ac 	.word	0x000007ac
 250:	00000c64 	.word	0x00000c64
 254:	00000820 	.word	0x00000820
 258:	00000000 	.word	0x00000000

0000025c <PrintChar>:

int volatile* const JTAG = (int*)JTAG_UART_BASE;

void PrintChar(char c)
{
    *(JTAG) = c;
 25c:	e3a03a01 	mov	r3, #4096	; 0x1000
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e5830000 	str	r0, [r3]
 268:	e12fff1e 	bx	lr

0000026c <Print>:
}


void Print(char str[])
{
 26c:	e92d4010 	push	{r4, lr}
 270:	e1a04000 	mov	r4, r0
    //int size = sizeof(str) / sizeof(str[0]);
   for(int i = 0; str[i] != '\0'; i++)
 274:	e5d00000 	ldrb	r0, [r0]
 278:	e3500000 	cmp	r0, #0
 27c:	08bd8010 	popeq	{r4, pc}
    {
        PrintChar(str[i]);
 280:	ebfffff5 	bl	25c <PrintChar>


void Print(char str[])
{
    //int size = sizeof(str) / sizeof(str[0]);
   for(int i = 0; str[i] != '\0'; i++)
 284:	e5f40001 	ldrb	r0, [r4, #1]!
 288:	e3500000 	cmp	r0, #0
 28c:	1afffffb 	bne	280 <Print+0x14>
 290:	e8bd8010 	pop	{r4, pc}

00000294 <Println>:
        PrintChar(str[i]);
    }
}

void Println(char str[])
{
 294:	e92d4008 	push	{r3, lr}
    Print(str);
 298:	ebfffff3 	bl	26c <Print>
    PrintChar('\n');
 29c:	e3a0000a 	mov	r0, #10
 2a0:	ebffffed 	bl	25c <PrintChar>
 2a4:	e8bd8008 	pop	{r3, pc}

000002a8 <Read>:
char Read(void) 
{
    int dataRegister;
    // read the JTAG_UART data register
    do {
        dataRegister = *(JTAG);
 2a8:	e3a03a01 	mov	r3, #4096	; 0x1000
 2ac:	e34f3f20 	movt	r3, #65312	; 0xff20
 2b0:	e5930000 	ldr	r0, [r3]
    }

    // Masking with position of Rvalid to see if there is a new character available
    
    while (!(dataRegister & 0x00008000));
 2b4:	e3100902 	tst	r0, #32768	; 0x8000
 2b8:	0afffffc 	beq	2b0 <Read+0x8>

    return (char)(dataRegister & 0xFF);
 2bc:	e6ef0070 	uxtb	r0, r0
 2c0:	e12fff1e 	bx	lr

000002c4 <main>:
#include "JTAG.h"
#include "num2str.h"

void main(void) {
 2c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 2c8:	e24dd01c 	sub	sp, sp, #28
    int numToPrint = 24680;

    char message[] = "Number to print: ";
 2cc:	e28de004 	add	lr, sp, #4
 2d0:	e300c7b4 	movw	r12, #1972	; 0x7b4
 2d4:	e340c000 	movt	r12, #0
 2d8:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
 2dc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 2e0:	e59c3000 	ldr	r3, [r12]
 2e4:	e1ce30b0 	strh	r3, [lr]
    Print(message);
 2e8:	e28d0004 	add	r0, sp, #4
 2ec:	ebffffde 	bl	26c <Print>

    char* num = Num2Str(numToPrint);
 2f0:	e3060068 	movw	r0, #24680	; 0x6068
 2f4:	eb000002 	bl	304 <Num2Str>
    Print(num);
 2f8:	ebffffdb 	bl	26c <Print>
 2fc:	e28dd01c 	add	sp, sp, #28
 300:	e8bd8000 	ldmfd	sp!, {pc}

00000304 <Num2Str>:
#include "address_map_arm.h"

char* Num2Str(int num) {
 304:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 308:	e3a01000 	mov	r1, #0
    int i = 0;
    char* str = (char*)DDR_BASE;
    do {
        str[i++] = (num % 10) + '0';  // Convert digit to character
 30c:	e3064667 	movw	r4, #26215	; 0x6667
 310:	e3464666 	movt	r4, #26214	; 0x6666
 314:	e1a02001 	mov	r2, r1
 318:	e0cc3094 	smull	r3, r12, r4, r0
 31c:	e1a03fc0 	asr	r3, r0, #31
 320:	e063314c 	rsb	r3, r3, r12, asr #2
 324:	e083c103 	add	r12, r3, r3, lsl #2
 328:	e040008c 	sub	r0, r0, r12, lsl #1
 32c:	e2800030 	add	r0, r0, #48	; 0x30
 330:	e4c10001 	strb	r0, [r1], #1
 334:	e1a0c001 	mov	r12, r1
        num /= 10;
 338:	e1a00003 	mov	r0, r3
    } while (num > 0);
 33c:	e3530000 	cmp	r3, #0
 340:	cafffff3 	bgt	314 <Num2Str+0x10>

    for (int j = 0, k = i - 1; j < k; j++) {
 344:	e3520000 	cmp	r2, #0
 348:	da000006 	ble	368 <Num2Str+0x64>
 34c:	e3a03000 	mov	r3, #0
        char temp = str[j];
 350:	e5d31000 	ldrb	r1, [r3]
        str[j] = str[k];
 354:	e5d20000 	ldrb	r0, [r2]
 358:	e4c30001 	strb	r0, [r3], #1
        str[k] = temp;
 35c:	e4421001 	strb	r1, [r2], #-1
    do {
        str[i++] = (num % 10) + '0';  // Convert digit to character
        num /= 10;
    } while (num > 0);

    for (int j = 0, k = i - 1; j < k; j++) {
 360:	e1520003 	cmp	r2, r3
 364:	cafffff9 	bgt	350 <Num2Str+0x4c>
        str[k] = temp;
        k--;
    }


    str[i] = '\0';
 368:	e3a00000 	mov	r0, #0
 36c:	e5cc0000 	strb	r0, [r12]

    return str;
 370:	e8bd0010 	ldmfd	sp!, {r4}
 374:	e12fff1e 	bx	lr

00000378 <atexit>:
 378:	e1a01000 	mov	r1, r0
 37c:	e3a00000 	mov	r0, #0
 380:	e92d4008 	push	{r3, lr}
 384:	e1a02000 	mov	r2, r0
 388:	e1a03000 	mov	r3, r0
 38c:	eb00000e 	bl	3cc <__register_exitproc>
 390:	e8bd4008 	pop	{r3, lr}
 394:	e12fff1e 	bx	lr

00000398 <exit>:
 398:	e92d4008 	push	{r3, lr}
 39c:	e3a01000 	mov	r1, #0
 3a0:	e1a04000 	mov	r4, r0
 3a4:	eb000045 	bl	4c0 <__call_exitprocs>
 3a8:	e59f3018 	ldr	r3, [pc, #24]	; 3c8 <exit+0x30>
 3ac:	e5930000 	ldr	r0, [r3]
 3b0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 3b4:	e3530000 	cmp	r3, #0
 3b8:	11a0e00f 	movne	lr, pc
 3bc:	112fff13 	bxne	r3
 3c0:	e1a00004 	mov	r0, r4
 3c4:	eb0000c9 	bl	6f0 <_exit>
 3c8:	000007c8 	.word	0x000007c8

000003cc <__register_exitproc>:
 3cc:	e59fc0e4 	ldr	r12, [pc, #228]	; 4b8 <__register_exitproc+0xec>
 3d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3d4:	e59c4000 	ldr	r4, [r12]
 3d8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 3dc:	e35c0000 	cmp	r12, #0
 3e0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 3e4:	e59c5004 	ldr	r5, [r12, #4]
 3e8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 3ec:	e355001f 	cmp	r5, #31
 3f0:	e24dd010 	sub	sp, sp, #16
 3f4:	e1a06000 	mov	r6, r0
 3f8:	da000015 	ble	454 <__register_exitproc+0x88>
 3fc:	e59f00b8 	ldr	r0, [pc, #184]	; 4bc <__register_exitproc+0xf0>
 400:	e3500000 	cmp	r0, #0
 404:	1a000001 	bne	410 <__register_exitproc+0x44>
 408:	e3e00000 	mvn	r0, #0
 40c:	ea000018 	b	474 <__register_exitproc+0xa8>
 410:	e3a00e19 	mov	r0, #400	; 0x190
 414:	e58d100c 	str	r1, [sp, #12]
 418:	e58d2008 	str	r2, [sp, #8]
 41c:	e58d3004 	str	r3, [sp, #4]
 420:	e320f000 	nop	{0}
 424:	e250c000 	subs	r12, r0, #0
 428:	e59d100c 	ldr	r1, [sp, #12]
 42c:	e59d2008 	ldr	r2, [sp, #8]
 430:	e59d3004 	ldr	r3, [sp, #4]
 434:	0afffff3 	beq	408 <__register_exitproc+0x3c>
 438:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 43c:	e3a00000 	mov	r0, #0
 440:	e58c0004 	str	r0, [r12, #4]
 444:	e58c5000 	str	r5, [r12]
 448:	e584c148 	str	r12, [r4, #328]	; 0x148
 44c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 450:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 454:	e3560000 	cmp	r6, #0
 458:	e59c4004 	ldr	r4, [r12, #4]
 45c:	1a000007 	bne	480 <__register_exitproc+0xb4>
 460:	e2843002 	add	r3, r4, #2
 464:	e2844001 	add	r4, r4, #1
 468:	e78c1103 	str	r1, [r12, r3, lsl #2]
 46c:	e58c4004 	str	r4, [r12, #4]
 470:	e3a00000 	mov	r0, #0
 474:	e28dd010 	add	sp, sp, #16
 478:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 47c:	e12fff1e 	bx	lr
 480:	e3a00001 	mov	r0, #1
 484:	e1a00410 	lsl	r0, r0, r4
 488:	e08c8104 	add	r8, r12, r4, lsl #2
 48c:	e3560002 	cmp	r6, #2
 490:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 494:	e5883108 	str	r3, [r8, #264]	; 0x108
 498:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 49c:	e1877000 	orr	r7, r7, r0
 4a0:	01830000 	orreq	r0, r3, r0
 4a4:	e1a05008 	mov	r5, r8
 4a8:	e5882088 	str	r2, [r8, #136]	; 0x88
 4ac:	e58c7188 	str	r7, [r12, #392]	; 0x188
 4b0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 4b4:	eaffffe9 	b	460 <__register_exitproc+0x94>
 4b8:	000007c8 	.word	0x000007c8
 4bc:	00000000 	.word	0x00000000

000004c0 <__call_exitprocs>:
 4c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 4c4:	e59f3168 	ldr	r3, [pc, #360]	; 634 <__call_exitprocs+0x174>
 4c8:	e5933000 	ldr	r3, [r3]
 4cc:	e24dd014 	sub	sp, sp, #20
 4d0:	e58d3004 	str	r3, [sp, #4]
 4d4:	e2833f52 	add	r3, r3, #328	; 0x148
 4d8:	e58d0008 	str	r0, [sp, #8]
 4dc:	e58d300c 	str	r3, [sp, #12]
 4e0:	e1a07001 	mov	r7, r1
 4e4:	e3a08001 	mov	r8, #1
 4e8:	e59d3004 	ldr	r3, [sp, #4]
 4ec:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 4f0:	e3560000 	cmp	r6, #0
 4f4:	e59db00c 	ldr	r11, [sp, #12]
 4f8:	0a000033 	beq	5cc <__call_exitprocs+0x10c>
 4fc:	e5965004 	ldr	r5, [r6, #4]
 500:	e2554001 	subs	r4, r5, #1
 504:	5286a088 	addpl	r10, r6, #136	; 0x88
 508:	5285501f 	addpl	r5, r5, #31
 50c:	508a5105 	addpl	r5, r10, r5, lsl #2
 510:	5a000007 	bpl	534 <__call_exitprocs+0x74>
 514:	ea000029 	b	5c0 <__call_exitprocs+0x100>
 518:	e5953000 	ldr	r3, [r5]
 51c:	e1530007 	cmp	r3, r7
 520:	0a000005 	beq	53c <__call_exitprocs+0x7c>
 524:	e2444001 	sub	r4, r4, #1
 528:	e3740001 	cmn	r4, #1
 52c:	e2455004 	sub	r5, r5, #4
 530:	0a000022 	beq	5c0 <__call_exitprocs+0x100>
 534:	e3570000 	cmp	r7, #0
 538:	1afffff6 	bne	518 <__call_exitprocs+0x58>
 53c:	e5963004 	ldr	r3, [r6, #4]
 540:	e06a2005 	rsb	r2, r10, r5
 544:	e2433001 	sub	r3, r3, #1
 548:	e0862002 	add	r2, r6, r2
 54c:	e1530004 	cmp	r3, r4
 550:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 554:	13a01000 	movne	r1, #0
 558:	05864004 	streq	r4, [r6, #4]
 55c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 560:	e3530000 	cmp	r3, #0
 564:	0affffee 	beq	524 <__call_exitprocs+0x64>
 568:	e1a02418 	lsl	r2, r8, r4
 56c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 570:	e1120001 	tst	r2, r1
 574:	e5969004 	ldr	r9, [r6, #4]
 578:	0a000016 	beq	5d8 <__call_exitprocs+0x118>
 57c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 580:	e1120001 	tst	r2, r1
 584:	1a000016 	bne	5e4 <__call_exitprocs+0x124>
 588:	e59d0008 	ldr	r0, [sp, #8]
 58c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 590:	e1a0e00f 	mov	lr, pc
 594:	e12fff13 	bx	r3
 598:	e5963004 	ldr	r3, [r6, #4]
 59c:	e1530009 	cmp	r3, r9
 5a0:	1affffd0 	bne	4e8 <__call_exitprocs+0x28>
 5a4:	e59b3000 	ldr	r3, [r11]
 5a8:	e1530006 	cmp	r3, r6
 5ac:	1affffcd 	bne	4e8 <__call_exitprocs+0x28>
 5b0:	e2444001 	sub	r4, r4, #1
 5b4:	e3740001 	cmn	r4, #1
 5b8:	e2455004 	sub	r5, r5, #4
 5bc:	1affffdc 	bne	534 <__call_exitprocs+0x74>
 5c0:	e59f1070 	ldr	r1, [pc, #112]	; 638 <__call_exitprocs+0x178>
 5c4:	e3510000 	cmp	r1, #0
 5c8:	1a000009 	bne	5f4 <__call_exitprocs+0x134>
 5cc:	e28dd014 	add	sp, sp, #20
 5d0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5d4:	e12fff1e 	bx	lr
 5d8:	e1a0e00f 	mov	lr, pc
 5dc:	e12fff13 	bx	r3
 5e0:	eaffffec 	b	598 <__call_exitprocs+0xd8>
 5e4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 5e8:	e1a0e00f 	mov	lr, pc
 5ec:	e12fff13 	bx	r3
 5f0:	eaffffe8 	b	598 <__call_exitprocs+0xd8>
 5f4:	e5963004 	ldr	r3, [r6, #4]
 5f8:	e3530000 	cmp	r3, #0
 5fc:	e5963000 	ldr	r3, [r6]
 600:	1a000008 	bne	628 <__call_exitprocs+0x168>
 604:	e3530000 	cmp	r3, #0
 608:	0a000006 	beq	628 <__call_exitprocs+0x168>
 60c:	e1a00006 	mov	r0, r6
 610:	e58b3000 	str	r3, [r11]
 614:	e320f000 	nop	{0}
 618:	e59b6000 	ldr	r6, [r11]
 61c:	e3560000 	cmp	r6, #0
 620:	1affffb5 	bne	4fc <__call_exitprocs+0x3c>
 624:	eaffffe8 	b	5cc <__call_exitprocs+0x10c>
 628:	e1a0b006 	mov	r11, r6
 62c:	e1a06003 	mov	r6, r3
 630:	eafffff9 	b	61c <__call_exitprocs+0x15c>
 634:	000007c8 	.word	0x000007c8
 638:	00000000 	.word	0x00000000

0000063c <register_fini>:
 63c:	e92d4008 	push	{r3, lr}
 640:	e59f3010 	ldr	r3, [pc, #16]	; 658 <register_fini+0x1c>
 644:	e3530000 	cmp	r3, #0
 648:	159f000c 	ldrne	r0, [pc, #12]	; 65c <register_fini+0x20>
 64c:	1bffff49 	blne	378 <atexit>
 650:	e8bd4008 	pop	{r3, lr}
 654:	e12fff1e 	bx	lr
 658:	000007f0 	.word	0x000007f0
 65c:	00000660 	.word	0x00000660

00000660 <__libc_fini_array>:
 660:	e92d4038 	push	{r3, r4, r5, lr}
 664:	e59f5030 	ldr	r5, [pc, #48]	; 69c <__libc_fini_array+0x3c>
 668:	e59f4030 	ldr	r4, [pc, #48]	; 6a0 <__libc_fini_array+0x40>
 66c:	e0654004 	rsb	r4, r5, r4
 670:	e1b04144 	asrs	r4, r4, #2
 674:	10855104 	addne	r5, r5, r4, lsl #2
 678:	0a000004 	beq	690 <__libc_fini_array+0x30>
 67c:	e5353004 	ldr	r3, [r5, #-4]!
 680:	e1a0e00f 	mov	lr, pc
 684:	e12fff13 	bx	r3
 688:	e2544001 	subs	r4, r4, #1
 68c:	1afffffa 	bne	67c <__libc_fini_array+0x1c>
 690:	eb000056 	bl	7f0 <__libc_fini>
 694:	e8bd4038 	pop	{r3, r4, r5, lr}
 698:	e12fff1e 	bx	lr
 69c:	00000808 	.word	0x00000808
 6a0:	0000080c 	.word	0x0000080c

000006a4 <__cs3_premain>:
 6a4:	e92d4008 	push	{r3, lr}
 6a8:	eb00001d 	bl	724 <__libc_init_array>
 6ac:	e59f3030 	ldr	r3, [pc, #48]	; 6e4 <__cs3_premain+0x40>
 6b0:	e3530000 	cmp	r3, #0
 6b4:	15930000 	ldrne	r0, [r3]
 6b8:	01a00003 	moveq	r0, r3
 6bc:	e59f3024 	ldr	r3, [pc, #36]	; 6e8 <__cs3_premain+0x44>
 6c0:	e3530000 	cmp	r3, #0
 6c4:	15931000 	ldrne	r1, [r3]
 6c8:	01a01003 	moveq	r1, r3
 6cc:	e3a02000 	mov	r2, #0
 6d0:	ebfffefb 	bl	2c4 <main>
 6d4:	e59f3010 	ldr	r3, [pc, #16]	; 6ec <__cs3_premain+0x48>
 6d8:	e3530000 	cmp	r3, #0
 6dc:	1bffff2d 	blne	398 <exit>
 6e0:	eafffffe 	b	6e0 <__cs3_premain+0x3c>
	...
 6ec:	00000398 	.word	0x00000398

000006f0 <_exit>:
 6f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 6f4:	e3a00018 	mov	r0, #24
 6f8:	e59f1004 	ldr	r1, [pc, #4]	; 704 <_exit+0x14>
 6fc:	ef123456 	svc	0x00123456
 700:	eafffffe 	b	700 <_exit+0x10>
 704:	00020026 	.word	0x00020026

00000708 <__cs3_isr_interrupt>:
 708:	eafffffe 	b	708 <__cs3_isr_interrupt>

0000070c <__cs3_isr_undef>:
 70c:	eafffffe 	b	70c <__cs3_isr_undef>

00000710 <__cs3_isr_swi>:
 710:	eafffffe 	b	710 <__cs3_isr_swi>

00000714 <__cs3_isr_pabort>:
 714:	eafffffe 	b	714 <__cs3_isr_pabort>

00000718 <__cs3_isr_dabort>:
 718:	eafffffe 	b	718 <__cs3_isr_dabort>

0000071c <__cs3_isr_irq>:
 71c:	eafffffe 	b	71c <__cs3_isr_irq>

00000720 <__cs3_isr_fiq>:
 720:	eafffffe 	b	720 <__cs3_isr_fiq>

00000724 <__libc_init_array>:
 724:	e92d4070 	push	{r4, r5, r6, lr}
 728:	e59f506c 	ldr	r5, [pc, #108]	; 79c <__libc_init_array+0x78>
 72c:	e59f606c 	ldr	r6, [pc, #108]	; 7a0 <__libc_init_array+0x7c>
 730:	e0656006 	rsb	r6, r5, r6
 734:	e1b06146 	asrs	r6, r6, #2
 738:	12455004 	subne	r5, r5, #4
 73c:	13a04000 	movne	r4, #0
 740:	0a000005 	beq	75c <__libc_init_array+0x38>
 744:	e5b53004 	ldr	r3, [r5, #4]!
 748:	e2844001 	add	r4, r4, #1
 74c:	e1a0e00f 	mov	lr, pc
 750:	e12fff13 	bx	r3
 754:	e1560004 	cmp	r6, r4
 758:	1afffff9 	bne	744 <__libc_init_array+0x20>
 75c:	e59f5040 	ldr	r5, [pc, #64]	; 7a4 <__libc_init_array+0x80>
 760:	e59f6040 	ldr	r6, [pc, #64]	; 7a8 <__libc_init_array+0x84>
 764:	e0656006 	rsb	r6, r5, r6
 768:	eb000018 	bl	7d0 <_init>
 76c:	e1b06146 	asrs	r6, r6, #2
 770:	12455004 	subne	r5, r5, #4
 774:	13a04000 	movne	r4, #0
 778:	0a000005 	beq	794 <__libc_init_array+0x70>
 77c:	e5b53004 	ldr	r3, [r5, #4]!
 780:	e2844001 	add	r4, r4, #1
 784:	e1a0e00f 	mov	lr, pc
 788:	e12fff13 	bx	r3
 78c:	e1560004 	cmp	r6, r4
 790:	1afffff9 	bne	77c <__libc_init_array+0x58>
 794:	e8bd4070 	pop	{r4, r5, r6, lr}
 798:	e12fff1e 	bx	lr
 79c:	000007e8 	.word	0x000007e8
 7a0:	000007e8 	.word	0x000007e8
 7a4:	000007e8 	.word	0x000007e8
 7a8:	000007f0 	.word	0x000007f0

Disassembly of section .rodata:

000007b0 <JTAG>:
 7b0:	ff201000 626d754e 74207265 7270206f     .. .Number to pr
 7c0:	3a746e69 00000020                       int: ...

000007c8 <_global_impure_ptr>:
 7c8:	00000830 00000043                       0...C...

000007d0 <_init>:
 7d0:	e1a0c00d 	mov	r12, sp
 7d4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 7d8:	e24cb004 	sub	r11, r12, #4
 7dc:	e24bd028 	sub	sp, r11, #40	; 0x28
 7e0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 7e4:	e12fff1e 	bx	lr

000007e8 <__init_array_start>:
 7e8:	0000063c 	.word	0x0000063c

000007ec <__frame_dummy_init_array_entry>:
 7ec:	00000208                                ....

000007f0 <__libc_fini>:
 7f0:	e1a0c00d 	mov	r12, sp
 7f4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 7f8:	e24cb004 	sub	r11, r12, #4
 7fc:	e24bd028 	sub	sp, r11, #40	; 0x28
 800:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 804:	e12fff1e 	bx	lr

00000808 <__fini_array_start>:
 808:	000001c4 	.word	0x000001c4

0000080c <__cs3_regions>:
	...
 818:	00000c60 	.word	0x00000c60
 81c:	00000020 	.word	0x00000020
